-Was sind Buffer-Overflows? (->Wikipedia Pufferüberlauf)
 -Überprüfungswerkzeuge
 -Canary durch Compiler einfügen (analog Kanarienvogel im Bergbau)
 -Rücksprungadresse kopieren

-Bugs und potentielle Sicherheitsproblem finden
 -Automatische Codeanalyse -> statische (z.B. ->lint), dynamische (z.B. ->valgrind)

-NX-Bit: No eXecute
 -CPU unterstütztes Sicherheitsverfahren
 -Speicherseiten werden als Daten- oder Programmsegment markiert

Bei einigen Angriffe gelingt es einem Angreifer, dafür zu sorgen, dass
von ihm selbst übergebene Daten ausgeführt werden. Um solche Angriffe zu
verhindern, beherrschen aktuelle Betriebssysteme Data Execution
Prevention (DEP), dabei können Speicherbereiche seitenweise als
nicht-ausführbar markiert werden. Die passende Hardware-Unterstützung
bei Intel-kompatiblen Prozessoren wurde dazu von AMD mit dem Athlon 64
mit dem sog. NX-Bit (No eXecute) eingeführt (bei Intel als XD-Bit,
Execute Disable, bezeichnet).

Wenn es einem Angreifer aber gelingt, beliebige Speicherstellen
auszuführen, so kann er trotz dieser Schutzmaßnahmen im Speicher
vorhandene Codesegmente nutzen:
http://www.heise.de/newsticker/meldung/Verwundbar-trotz-No-Execute-135471.html

Auch gibt es bestimmte Programme, die nicht mittels DEP geschützt werden
können: Der Java-JIT-Compiler verändert zu Laufzeit ausführbaren Code
und daher können Java-Programme in einer aktuellen VM nicht geschützt
werden.

-Sicherheitsmechanismen unter Linux
 -Benutzerkonzept
 -Capabilities

Auf einem klassischen Linuxsystem kann man ein Programm entweder
privilegiert (also mit root-Rechten, uid 0, Programm darf i.W. alles)
oder nicht-privilegiert (Programm
darf nur auf die Dateien zugreifen, die entsprechenden
Dateiberechtigungen zugelassen sind, darf nur auf UDP/TCP-Ports >= 1024
Verbindungen annehmen etc.) ausgeführt werden.

Häufig benötigt ein Programm zwar bestimmte Rechte, die root vorbehalten
sind, benötigt aber nicht über seine gesamte Laufzeit alle Rechte. Um
die Gefahr durch Programmier- und Konfigurationsfehler zu senken, kann
jeder Thread eines Programm daher freiwillig diese Rechte abgeben. Dazu
wurde in Linux 2.2 das Konzept der Capabilities eingeführt.

Angenommen, man benutze einen IMAP-Mail-Server. Dieser muss z.B. (falls man
nicht inetd o.ä. zurückgreift) das priveligierte Recht CAP_NET_BIND_SERVICE
besitzen um den Port 143 (und für das ältere IMAPS ggf. Port 993) zu
öffnen. Direkt nach dem Starten kann er aber diverse niemals benötigte
Rechte abgeben. Nachdem Öffnen des Ports 143 kann er auch
CAP_NET_BIND_SERVICE abgeben. Wenn sich nun ein System-Benutzer "user"
per IMAP einloggt und auf ~user/Mail/ zugreifen möchte, so kann der
IMAP-Server einen neuen Thread starten, dieser mit dem Recht CAP_SETUID
den Befehl setuid ausführen und damit seine Rechte auf die von user
beschränken.

Weitere Infos: man capabilities

 -Datei-Berechtigungen (klassisch, +ACLs)
 -Linux Security Modules
  -SELinux
  -AppArmor
